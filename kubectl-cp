#!/usr/bin/env python3
# pylint: disable=invalid-name
# -*- coding: utf-8 -*-
"""
---
name: kubectl-cp
description: An easy way to copy files from/to containers running on Kubernetes
website: https://github.com/marcio-pessoa/kubectl-cp
"""

import argparse
from enum import Enum
import os
import shlex
import sys
import subprocess
import logging
import logging.handlers


class Direction(Enum):
    """ File transfer direction type

    Args:
        Enum (int): File transfer direction type
    """
    unknown = 0
    download = 1
    upload = 2
    invalid = 5


class FileSystem(Enum):
    """ File system object type

    Args:
        Enum (int): File system object type
    """
    unknown = 0
    file = 1
    directory = 2
    hard_link = 3
    symbolic_link = 4


class Main:  # pylint: disable=too-few-public-methods
    """ Main class """

    __version__ = '0.2.4-93'
    __date__ = '2024-03-28'
    __name = 'kubectl-cp'

    def __init__(self):
        args = self.parser().parse_args()

        Log().name = self.__name
        Log().verbosity = 'WARNING'
        Log().start()
        Log().verbosity = args.verbosity

        result = CopyFacade(args.src, args.dst,
                            args.arguments, args.recursive).run()
        sys.exit(result)

    def parser(self) -> argparse.ArgumentParser:
        """ Deal with argparse

        Returns:
            argparse.ArgumentParser: argparse object
        """
        parser = argparse.ArgumentParser(
            prog=self.__name,
            description=(
                'An easy way to copy files from/to containers running on '
                'Kubernetes'
            ),
            formatter_class=argparse.RawDescriptionHelpFormatter,
            add_help=True,
            epilog=(
                'examples:\n'
                '  kubectl-cp -a "pod/example" container:/tmp/file .\n'
                '  kubectl-cp -a "deploy/example" -r container:/dir .\n'
                '  kubectl-cp -a "pod/example" file container:/tmp\n'
                '  kubectl-cp -a "-n test pod/example" -r dir container:/dir\n'
                '\n'
                'Copyleft (â†„) 2023-2024 Marcio Pessoa\n'
                'License: GPLv3\n'
                'Website: https://github.com/marcio-pessoa/kubectl-cp\n'
                'Contact: Marcio Pessoa <marcio.pessoa@gmail.com>\n'
            ),
        )
        parser.add_argument(
            'src',
            help='Source path'
        )
        parser.add_argument(
            'dst',
            help='Destination path'
        )
        parser.add_argument(
            '-a', '--arguments',
            help='kubectl arguments'
        )
        parser.add_argument(
            '-r', '--recursive',
            help='Recursively copy directories',
            action='store_true'
        )
        parser.add_argument(
            '-v', '--verbosity',
            type=str,
            choices=['CRITICAL', 'ERROR', 'WARNING', 'INFO', 'DEBUG'],
            default='ERROR',
            help=(
                'verbose mode, options: '
                'CRITICAL, ERROR (default), WARNING, INFO, DEBUG'
            )
        )
        parser.add_argument(
            '-V', '--version',
            action='version',
            help='show version information and exit',
            version=(f'kubectl-cp {self.__version__} {self.__date__}'),
        )
        return parser


class CopyFacade:
    """ Copy Facade class

    Args:
        src (str): Source path
        dst (str): Destination path
        kubectl_args (str): kubectl arguments
        recursive (bool): Recursion
    """

    def __init__(self, src: str, dst: str, kubectl_args: str,
                 recursive: bool):
        self.__container: str
        self.__src_path: str
        self.__dst_path: str
        self.__kubectl_args: str = kubectl_args
        self.__recursive: bool = recursive
        self.__direction: Direction = self._detect_direction(src, dst)
        self.set_direction_env(src, dst)

    def run(self) -> bool:
        """ Run file transfer

        Returns:
            bool: False on OK
        """
        copy = Copy(self.__container, self.__src_path, self.__dst_path,
                    self.__kubectl_args)

        if self.__direction == Direction.download and not self.__recursive:
            return copy.from_container_to_localhost()
        if self.__direction == Direction.upload and not self.__recursive:
            return copy.from_localhost_to_container()
        if self.__direction == Direction.download and self.__recursive:
            return copy.from_container_directory_to_localhost()
        if self.__direction == Direction.upload and self.__recursive:
            return copy.from_localhost_directory_to_container()

        log.error('Invalid input.')
        return True

    def set_direction_env(self, src: str, dst: str):
        """ Set transfer direction variables

        Args:
            src (str): Source path
            dst (str): Destination path
        """
        if self.__direction == Direction.download:
            self.__container = _split_container_and_file(src)[0]
            self.__src_path = _split_container_and_file(src)[1]
            self.__dst_path = dst
        elif self.__direction == Direction.upload:
            self.__container = _split_container_and_file(dst)[0]
            self.__src_path = src
            self.__dst_path = _split_container_and_file(dst)[1]

        log.info('direction: %s', self.__direction.name)
        log.info('container: %s', self.__container)
        log.info('source: %s', self.__src_path)
        log.info('destination: %s', self.__dst_path)
        log.info('arguments: %s', self.__kubectl_args)

    def _detect_direction(self, src, dst) -> Direction:
        if len(_split_container_and_file(src)) > 1:
            return Direction.download
        if len(_split_container_and_file(dst)) > 1:
            return Direction.upload
        return Direction.invalid


class Copy:
    """ Copy files from/to containers

    Args:
        container (str): Container name
        src_path (str): Source path
        dst_path (str): Destination path
        kubectl_args (str): kubectl arguments
    """

    def __init__(self, container: str, src_path: str, dst_path: str,
                 kubectl_args: str) -> None:
        self.__container = container
        self.__src_path = src_path
        self.__dst_path = dst_path
        self.__kubectl_args = kubectl_args

    def from_container_to_localhost(self) -> bool:
        """ Copy a file from container to localhost
        Returns:
            bool: False on OK
        """
        if not self.__check_remote_path(self.__container, self.__src_path,
                                        self.__kubectl_args):
            return True

        log.info('Copying %s...', self.__src_path)

        if self.__dst_path == '.':
            self.__dst_path = os.path.basename(self.__src_path)

        cmd = (f'{_kubectl_path()} exec -i {self.__kubectl_args} '
               f'-c {self.__container} '
               f'-- cat {self.__src_path}')
        log.debug('  Command: %s', cmd)

        file_type = FileSystem.unknown
        try:
            result = subprocess.run(shlex.split(cmd),
                                    check=True, capture_output=True)
            file_type = FileSystem.file
        except subprocess.CalledProcessError:
            file_type = FileSystem.directory

        if file_type == FileSystem.file:
            return _save_file(self.__dst_path, result.stdout)
        if file_type == FileSystem.directory:
            log.debug('  Creating directory %s...', self.__dst_path)
            _create_directory(self.__dst_path)
            return False

        return True

    def from_localhost_to_container(self) -> bool:
        """ Copy a file from localhost to container
        Returns:
            bool: False on OK
        """
        content = _read_file(self.__src_path)
        if not content:
            log.error('%s: file not found.', self.__src_path)
            return True

        cmd = (f'{_kubectl_path()} exec '
               f'-i {self.__kubectl_args} '
               f'-c {self.__container} '
               f'-- sh -c "tee {self.__dst_path} > /dev/null"')
        log.debug('  Command: %s', cmd)

        result = subprocess.run(shlex.split(cmd), input=content,
                                check=False, capture_output=False)

        return result.returncode

    def from_container_directory_to_localhost(self) -> bool:
        """ Copy a directory and contents from container to localhost
        Returns:
            bool: False on OK
        """
        if not self.__check_remote_path(self.__container, self.__src_path,
                                        self.__kubectl_args):
            return True

        log.info('Fetching file list...')
        cmd = (f'{_kubectl_path()} exec -i {self.__kubectl_args} '
               f'-c {self.__container} '
               f'-- sh -c "find {self.__src_path}"')
        log.debug('  Command: %s', cmd)
        try:
            result = subprocess.run(shlex.split(cmd),
                                    check=True, capture_output=True)
        except subprocess.CalledProcessError:
            log.critical('  Failed to read directory')
            return True

        files = result.stdout.decode().split("\n")
        files.insert(0, self.__src_path)
        files = [x for x in files if x != '']

        dst_directories = _summarize_directory_structure(files)
        for i in dst_directories:
            relpath = os.path.relpath(i, os.path.dirname(self.__src_path))
            _create_directory(os.path.join(self.__dst_path, relpath))

        log.debug(files)
        for src_path in files:
            dst_path = os.path.join(
                self.__dst_path,
                src_path[src_path.index(os.path.basename(self.__src_path)):]
            )
            if Copy(self.__container, src_path, dst_path,
                    self.__kubectl_args).from_container_to_localhost():
                return True

        return False

    def from_localhost_directory_to_container(self) -> bool:
        """ Copy a directory and contents from localhost to container
        Returns:
            bool: False on OK
        """
        log.info('Fetching file list...')
        files_local, files_full_path = \
            self.__list_local_directory_recursively(self.__src_path)
        log.debug(files_local)

        log.info('Creating destination directory structure...')
        dst_directories = _summarize_directory_structure(
            self.__join_paths(self.__dst_path, files_local))

        for dst_directory in dst_directories:
            cmd = (f'{_kubectl_path()} exec -i {self.__kubectl_args} '
                   f'-c {self.__container} '
                   f'-- sh -c "mkdir -p {dst_directory}"')
            log.debug('  Command: %s', cmd)
            try:
                subprocess.run(shlex.split(cmd),
                               check=True, capture_output=True)
            except subprocess.CalledProcessError:
                log.critical('  Failed to create directory')
                return True

        for file_name, src_path in zip(files_local, files_full_path):
            dst_path = os.path.join(self.__dst_path, file_name)

            if Copy(self.__container, src_path, dst_path,
                    self.__kubectl_args).from_localhost_to_container():
                return True

        return False

    def __check_remote_path(self, container: str, path: str,
                            kubectl_args: str) -> bool:
        """ Check if remote path exists
        Returns:
            bool: True when path exists
        """
        log.debug('Checking if remote path exists...')
        cmd = (f'{_kubectl_path()} exec -i {kubectl_args} '
               f'-c {container} '
               f'-- sh -c "[ -f {path} ] || [ -d {path} ]"')
        log.debug('  Command: %s', cmd)
        try:
            if subprocess.run(shlex.split(cmd), check=True,
                              capture_output=True).returncode == 0:
                return True
            return False
        except subprocess.CalledProcessError:
            log.error('  Not found: %s', path)
            return False

    def __join_paths(self, base_path: str, files: list[str]) -> list[str]:
        result: list[str] = []
        for i in files:
            result.append(os.path.join(base_path, i))
        return result

    def __list_local_directory_recursively(self, path: str) \
            -> tuple[list[str], list[str]]:
        """ List local directory recursively

        Args:
            path (str): Work directory

        Returns:
            tuple[list, list]: Lists of files and with full path
        """
        file_names: list[str] = []
        full_paths: list[str] = []

        for dirpath, _, filenames in os.walk(path):
            for f in filenames:
                file_names.append(
                    os.path.join(dirpath, f))
                full_paths.append(
                    os.path.abspath(os.path.join(dirpath, f)))

        return file_names, full_paths


class Log:
    """ Log Borg pattern """
    _shared_state = {}
    name: str = 'Default log'
    logger = logging.getLogger(name)
    __verbosity: int = logging.WARNING  # example: logging.ERROR

    def __new__(cls):
        inst = super().__new__(cls)
        inst.__dict__ = cls._shared_state
        return inst

    def start(self) -> None:
        """ Start the log system """
        fmt = '%(levelname)s: %(message)s'
        handler = logging.StreamHandler(sys.stdout)
        handler.setFormatter(CustomFormatter(fmt))
        self.logger.addHandler(handler)

    @property
    def verbosity(self) -> int:
        """ verbosity getter function

        Returns:
            int: verbosity level
        """
        return self.__verbosity

    @verbosity.setter
    def verbosity(self, level):
        if level == 'DEBUG':
            self.__verbosity = logging.DEBUG
        elif level == 'INFO':
            self.__verbosity = logging.INFO
        elif level == 'WARNING':
            self.__verbosity = logging.WARNING
        elif level == 'ERROR':
            self.__verbosity = logging.ERROR
        elif level == 'CRITICAL':
            self.__verbosity = logging.CRITICAL
        else:
            self.__verbosity = logging.ERROR

        self.logger.setLevel(self.__verbosity)


class CustomFormatter(logging.Formatter):
    """ Add colors to log """
    grey = '\x1b[38;21m'
    blue = '\x1b[38;5;39m'
    yellow = '\x1b[38;5;226m'
    red = '\x1b[38;5;196m'
    bold_red = '\x1b[31;1m'
    reset = '\x1b[0m'

    def __init__(self, fmt):
        super().__init__()
        self.fmt = fmt
        self.formats = {
            logging.DEBUG: self.grey + self.fmt + self.reset,
            logging.INFO: self.blue + self.fmt + self.reset,
            logging.WARNING: self.yellow + self.fmt + self.reset,
            logging.ERROR: self.red + self.fmt + self.reset,
            logging.CRITICAL: self.bold_red + self.fmt + self.reset
        }

    def format(self, record):
        log_fmt = self.formats.get(record.levelno)
        formatter = logging.Formatter(log_fmt)
        return formatter.format(record)


log = Log().logger


def _kubectl_path():
    possible_paths = [
        '/snap/bin/kubectl',
        '/usr/bin/kubectl',
        '/usr/local/bin/kubectl',
    ]
    for path in possible_paths:
        if os.path.isfile(path):
            return path
    sys.exit('kubectl: command not found')


def _create_directory(path: str) -> bool:
    """ Create directory

    Args:
        dst_path (str): Directory name

    Returns:
        bool: False on OK
    """
    try:
        os.makedirs(path)
        return False
    except FileExistsError:
        return True


def _read_file(file_path: str) -> bytes:
    """ Read file content

    Args:
        file_path (str): File path

    Returns:
        bytes: File content
        False: Error (i.e. file not found)
    """
    try:
        with open(file_path, 'rb') as f:
            content = f.read()
        return content
    except FileNotFoundError:
        return False
    except EnvironmentError:
        return False


def _save_file(file_path: str, content: bytes) -> bool:
    """ Save content to file

    Args:
        file_path (str): File path
        content (bytes): Content

    Returns:
        bool: False on OK
    """
    try:
        with open(file_path, 'wb') as f:
            f.write(content)
    except EnvironmentError:
        return True

    return False


def _split_container_and_file(path: str) -> list:
    return path.split(':', 1)


def _summarize_directory_structure(files: list[str]) -> set[str]:
    result: list[str] = []
    for i in files:
        result.append(os.path.dirname(i))
    return set(result)


if __name__ == '__main__':
    Main()
