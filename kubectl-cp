#!/usr/bin/env python3
# pylint: disable=invalid-name
# -*- coding: utf-8 -*-
"""
---
name: kubectl-cp
description: An easy way to copy files from/to containers running on Kubernetes
website: https://github.com/marcio-pessoa/kubectl-cp
"""

import argparse
from enum import Enum
import os
import shlex
import sys
import subprocess


class Direction(Enum):
    """_summary_

    Args:
        Enum (int): _description_
    """
    unknown = 0
    download = 1
    upload = 2
    invalid = 5


class FileSystem(Enum):
    """_summary_

    Args:
        Enum (_type_): _description_
    """
    unknown = 0
    file = 1
    directory = 2
    hard_link = 3
    symbolic_link = 4


class Main():
    """ Main class """

    __version__ = '0.1.0'
    __date__ = '2023-09-15'

    def __init__(self):
        self.__verbose = False
        self.__container: str = None
        self.__src_path: str = None
        self.__dst_path: str = None

        parser = argparse.ArgumentParser(
            prog='kubectl-cp',
            description=(
                'An easy way to copy files from/to containers running on '
                'Kubernetes'
            ),
            formatter_class=argparse.RawDescriptionHelpFormatter,
            add_help=True,
            epilog=(
                'examples:\n'
                '  kubectl-cp src dst\n'
                '  kubectl-cp src dst\n'
                '\n'
                'Copyleft (c) 2023-2023 Marcio Pessoa\n'
                'License: GPLv3\n'
                'Website: https://github.com/marcio-pessoa/kubectl-cp\n'
                'Contact: Marcio Pessoa <marcio.pessoa@gmail.com>\n'
            ),
        )
        parser.add_argument(
            '-V', '--version',
            action='version',
            help='show version information and exit',
            version=(
                f'kubectl-cp {self.__version__} {self.__date__}'
            ),
        )
        parser.add_argument(
            '-v', '--verbose',
            help='Enable verbose output',
            action='store_true'
        )
        parser.add_argument(
            '-r', '--recursive',
            help='Recursively copy directories',
            action='store_true'
        )
        parser.add_argument(
            'src_path',
            help='Source path')
        parser.add_argument(
            'dst_path',
            help='Destination path')
        parser.add_argument(
            '-a', '--arguments',
            help='kubectl arguments'
        )

        args = parser.parse_args()
        self.__verbose = args.verbose

        direction = self._detect_direction(args.src_path, args.dst_path)

        self._verbose(f'direction: {direction.name}')
        self._verbose(f'container: {self.__container}')
        self._verbose(f'source: {self.__src_path}')
        self._verbose(f'destination: {self.__dst_path}')
        self._verbose(f'arguments: {args.arguments}')

        if direction == Direction.download and not args.recursive:
            self.from_container_to_localhost(
                self.__container, self.__src_path, self.__dst_path,
                args.arguments
            )
        elif direction == Direction.upload and not args.recursive:
            self.from_localhost_to_container(
                self.__container, self.__src_path, self.__dst_path,
                args.arguments
            )
        elif direction == Direction.download and args.recursive:
            self.from_container_directory_to_localhost(
                self.__container, self.__src_path, self.__dst_path,
                args.arguments
            )
        # elif direction == Direction.upload and args.recursive:
        #     self.from_localhost_to_container(
        #         self.__container, self.__src_path, self.__dst_path,
        #         args.arguments
        #     )
        else:
            print('Invalid input.')
            sys.exit(1)

    def _verbose(self, message):
        if self.__verbose:
            print(message)

    def _detect_direction(self, src_path, dst_path):
        direction = Direction.unknown

        if len(_split_container_and_file(src_path)) > 1:
            direction = Direction.download
            self.__container = _split_container_and_file(src_path)[0]
            self.__src_path = _split_container_and_file(src_path)[1]
            self.__dst_path = dst_path
        elif len(_split_container_and_file(dst_path)) > 1:
            direction = Direction.upload
            self.__container = _split_container_and_file(dst_path)[0]
            self.__src_path = src_path
            self.__dst_path = _split_container_and_file(dst_path)[1]
        else:
            direction = Direction.invalid

        return direction

    def from_container_to_localhost(self, container: str,
                                    src_path: str, dst_path: str,
                                    kubectl_args: str) -> bool:
        """ Copy a file from container to localhost

        Args:
            container (str): Container name
            src_path (str): Source file
            dst_path (str): Destination file
            kubectl_args (str): kubectl arguments

        Returns:
            bool: False on OK
        """
        self._verbose(f'Copying {src_path}...')

        if dst_path == '.':
            dst_path = os.path.basename(src_path)

        cmd = (f'kubectl exec -i {kubectl_args} '
               f'-c {container} '
               f'-- cat {src_path}')
        self._verbose(f'  Command: {cmd}')

        file_type = FileSystem.unknown
        try:
            result = subprocess.run(shlex.split(cmd),
                                    check=True, capture_output=True)
            file_type = FileSystem.file
        except subprocess.CalledProcessError:
            file_type = FileSystem.directory

        if file_type == FileSystem.file:
            _save_file(dst_path, result.stdout)
        elif file_type == FileSystem.directory:
            self._verbose(f'  Creating directory {dst_path}...')
            _create_directory(dst_path)

    def from_localhost_to_container(self, container: str,
                                    src_path: str, dst_path: str,
                                    kubectl_args: str):
        """ Copy a file from localhost to container

        Args:
            container (str): Container name
            src_path (str): Source file
            dst_path (str): Destination file
            kubectl_args (str): kubectl arguments

        Returns:
            _type_: _description_
        """
        content = _read_file(src_path)

        cmd = ('kubectl exec '
               f'-i {kubectl_args} '
               f'-c {container} '
               f'-- sh -c "echo \'{content.decode()}\' | tee {dst_path}"')
        self._verbose(f'  Command: {cmd}')

        result = subprocess.run(shlex.split(cmd),
                                check=False, capture_output=False)

        return result

    def from_container_directory_to_localhost(self, container: str,
                                              src_dir: str, dst_dir: str,
                                              kubectl_args: str) -> bool:
        """ Copy a directory and contents from container to localhost

        Args:
            container (str): Container name
            src_dir (str): Source directory
            dst_dir (str): Destination directory
            kubectl_args (str): kubectl arguments

        Returns:
            bool: _description_
        """
        if dst_dir == '.':
            dst_dir = os.path.basename(src_dir)

        self._verbose('Fetching file list...')
        cmd = (f'kubectl exec -i {kubectl_args} '
               f'-c {container} '
               f'-- sh -c "ls -1dR {src_dir}/*"')
        self._verbose(f'  Command: {cmd}')
        try:
            result = subprocess.run(shlex.split(cmd),
                                    check=True, capture_output=True)
        except subprocess.CalledProcessError:
            print('  Failed to read directory')
            sys.exit(True)

        files = result.stdout.decode().split("\n")
        files.insert(0, src_dir)
        files = [x for x in files if x != '']

        for src_path in files:
            self.from_container_to_localhost(
                container, src_path, dst_dir, kubectl_args)

        return False


def _create_directory(dst_path: str):
    """ Create directory

    Args:
        dst_path (str): Directory name
    """
    try:
        os.mkdir(dst_path)
    except FileExistsError:
        print(f'    Directory {dst_path} already exists.')
        # sys.exit(True)


def _read_file(file_path: str) -> str:
    """ Read file content

    Args:
        file_path (str): File path

    Returns:
        str: File content
    """
    try:
        with open(file_path, 'rb') as f:
            content = f.readline()
        return content
    except EnvironmentError:
        return True


def _save_file(file_path: str, content: bytes) -> bool:
    """ Save content to file

    Args:
        file_path (str): File path
        content (bytes): Content

    Returns:
        bool: _description_
    """
    try:
        with open(file_path, 'wb') as f:
            f.write(content)
    except EnvironmentError:
        return True

    return False


def _split_container_and_file(path: str) -> list:
    return path.split(':', 1)


if __name__ == '__main__':
    Main()
